apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion Config.compile_sdk
    buildToolsVersion Config.build_tools

    defaultConfig {
        applicationId "de.psdev.devdrawer"
        minSdkVersion Config.min_sdk
        targetSdkVersion Config.target_sdk
        versionCode project.ext.appVersionCode
        versionName project.ext.appVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        // Version info
        buildConfigField 'String', 'GIT_SHA', "\"${project.ext.gitHash}\""

        javaCompileOptions.annotationProcessorOptions.arguments['room.schemaLocation'] = rootProject.file('schemas').toString()
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all { ignoreFailures = true }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    final def keystorePropertiesFile = rootProject.file("release.properties")
    signingConfigs {
        debug {
        }
        release {
            if (keystorePropertiesFile.exists()) {
                final def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['keyStore'])
                storePassword keystoreProperties['keyStorePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyAliasPassword']
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }
    lintOptions {
        lintConfig project.file('lint.xml')
        disable "GoogleAppIndexingWarning"
    }
    packagingOptions {
        exclude '**/LICENSE'
        exclude '**/LICENSE.txt'
        exclude '**/NOTICE'
        exclude '**/NOTICE.txt'
        exclude '**/rxjava.properties'
        exclude '**/*.gwt.xml'
    }
}

dependencies {
    //
    // Test dependencies
    //
    testImplementation Libs.junit
    testImplementation Libs.robolectric
    testImplementation Libs.assertj
    testImplementation Libs.mockito

    //
    // Runtime dependencies
    //

    // Support Library
    implementation Libs.support_appcompat_v7

    // Android Architecture Libraries
    implementation Libs.room_runtime
    implementation Libs.room_rxjava2
    kapt Libs.room_compiler

    // Android Kotlin Extensions
    implementation Libs.android_ktx

    // Kotlin
    implementation Libs.kotlin_stdlib

    // LeakCanary
    debugImplementation Libs.leak_canary
    releaseImplementation Libs.leak_canary_no_op

    // Logging
    implementation Libs.slf4j_android_logger
    implementation Libs.kotlin_logging

    // RxJava
    implementation Libs.rxjava2
    implementation Libs.rxandroid
    implementation Libs.rxkotlin

}
