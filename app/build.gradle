apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'kotlin-kapt'

android {
    compileSdkVersion projectCompileSdkVersion
    buildToolsVersion projectBuildTools

    defaultConfig {
        applicationId "de.psdev.devdrawer"
        minSdkVersion projectMinSdkVersion
        targetSdkVersion projectTargetSdkVersion
        versionCode project.ext.appVersionCode
        versionName project.ext.appVersionName

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        // Version info
        buildConfigField 'String', 'GIT_SHA', "\"${project.ext.gitHash}\""

        javaCompileOptions.annotationProcessorOptions.arguments['room.schemaLocation'] = rootProject.file('schemas').toString()
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all { ignoreFailures = true }
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    final def keystorePropertiesFile = rootProject.file("release.properties")
    signingConfigs {
        debug {
        }
        release {
            if (keystorePropertiesFile.exists()) {
                final def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['keyStore'])
                storePassword keystoreProperties['keyStorePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyAliasPassword']
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }
    packagingOptions {
        exclude '**/LICENSE'
        exclude '**/LICENSE.txt'
        exclude '**/NOTICE'
        exclude '**/NOTICE.txt'
        exclude '**/rxjava.properties'
        exclude '**/*.gwt.xml'
    }
}

dependencies {
    //
    // Test dependencies
    //
    testImplementation "junit:junit:${junitVersion}"
    testImplementation "org.robolectric:robolectric:${robolectricVersion}"
    testImplementation "org.assertj:assertj-core:${assertjVersion}"
    testImplementation "org.mockito:mockito-core:${mockitoVersion}"

    //
    // Runtime dependencies
    //

    // Support Library
    implementation "com.android.support:appcompat-v7:${supportLibVersion}"

    // Android Architecture Libraries
    implementation "android.arch.persistence.room:runtime:${androidArchitectureVersion}"
    implementation "android.arch.persistence.room:rxjava2:${androidArchitectureVersion}"
    kapt "android.arch.persistence.room:compiler:${androidArchitectureVersion}"

    // Android Kotlin Extensions
    implementation 'androidx.core:core-ktx:0.1'

    // Kotlin
    implementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

    Logging
    implementation "de.psdev.slf4j-android-logger:slf4j-android-logger:${slf4jAndroidLoggerVersion}"
    implementation "io.github.microutils:kotlin-logging:${kotlinLoggingVersion}"

    // RxJava
    implementation "io.reactivex.rxjava2:rxjava:${rxjavaVersion}"
    implementation "io.reactivex.rxjava2:rxandroid:${rxandroidVersion}"
    implementation "io.reactivex.rxjava2:rxkotlin:${rxkotlinVersion}"

}
