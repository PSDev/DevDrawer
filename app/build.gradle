plugins {
    id 'com.android.application'
    id 'com.github.triplet.play' version '3.0.0'
}

apply plugin: 'kotlin-android'
apply plugin: 'kotlin-kapt'
apply plugin: "androidx.navigation.safeargs.kotlin"
apply plugin: 'com.google.firebase.crashlytics'
apply plugin: 'com.google.gms.google-services'
apply plugin: 'dagger.hilt.android.plugin'
apply plugin: 'com.mikepenz.aboutlibraries.plugin'
apply plugin: 'com.google.firebase.firebase-perf'

android {
    compileSdkVersion Config.compile_sdk
    buildToolsVersion Config.build_tools

    defaultConfig {
        applicationId "de.psdev.devdrawer"
        minSdkVersion Config.min_sdk
        targetSdkVersion Config.target_sdk
        versionCode project.ext.appVersionCode
        versionName project.ext.appVersionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        multiDexEnabled true

        resConfig "en"

        // Version info
        buildConfigField 'String', 'GIT_SHA', "\"${project.ext.gitHash}\""

        javaCompileOptions.annotationProcessorOptions.arguments['room.schemaLocation'] = rootProject.file('schemas').toString()
    }
    buildFeatures {
        viewBinding true
    }
    compileOptions {
        sourceCompatibility = JavaVersion.VERSION_1_8
        targetCompatibility = JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = "1.8"
        freeCompilerArgs += [
                "-Xinline-classes",
                "-progressive",
                "-Xopt-in=kotlin.RequiresOptIn",
                "-Xopt-in=kotlin.ExperimentalStdlibApi",
                "-Xopt-in=kotlin.time.ExperimentalTime",
                "-Xopt-in=kotlinx.coroutines.FlowPreview",
                "-Xopt-in=kotlinx.coroutines.ExperimentalCoroutinesApi"
        ]
    }
    testOptions {
        unitTests {
            includeAndroidResources = true
            all { ignoreFailures = true }
        }
    }
    final def keystorePropertiesFile = rootProject.file("release.properties")
    signingConfigs {
        debug {
        }
        release {
            def isRunningOnTravis = System.getenv("CI") == "true"
            if (isRunningOnTravis) {
                // configure keystore
                storeFile = file("../release.jks")
                storePassword = System.getenv("keystore_password")
                keyAlias = System.getenv("keystore_alias")
                keyPassword = System.getenv("keystore_alias_password")
            } else if (keystorePropertiesFile.exists()) {
                final def keystoreProperties = new Properties()
                keystoreProperties.load(new FileInputStream(keystorePropertiesFile))

                storeFile file(keystoreProperties['keyStore'])
                storePassword keystoreProperties['keyStorePassword']
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyAliasPassword']
            }
        }
    }
    buildTypes {
        debug {
            applicationIdSuffix ".debug"
            signingConfig signingConfigs.debug
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            if (keystorePropertiesFile.exists()) {
                signingConfig signingConfigs.release
            } else {
                signingConfig signingConfigs.debug
            }
        }
    }
    lintOptions {
        lintConfig project.file('lint.xml')
        disable "GoogleAppIndexingWarning"
        enable 'Interoperability'
    }
    packagingOptions {
        exclude '**/LICENSE'
        exclude '**/LICENSE.txt'
        exclude '**/NOTICE'
        exclude '**/NOTICE.txt'
        exclude '**/*.gwt.xml'
    }
}

dependencies {
    //
    // Platforms
    //
    implementation platform(Platforms.firebase)
    implementation platform(Platforms.kotlin)

    //
    // Test dependencies
    //
    testImplementation Libs.junit
    testImplementation Libs.robolectric
    testImplementation Libs.mockk

    //
    // Runtime dependencies
    //

    // AboutLibraries
    implementation Libs.about_libraries

    // AndroidX
    implementation Libs.androidx_appcompat
    implementation Libs.androidx_browser
    implementation Libs.androidx_constraint_layout
    implementation Libs.androidx_core
    implementation Libs.androidx_fragment
    implementation Libs.androidx_hilt_lifecycle_viewmodel
    implementation Libs.androidx_hilt_work
    implementation Libs.androidx_lifecycle_viewmodel
    implementation Libs.androidx_lifecycle_java8
    implementation Libs.androidx_lifecycle_process
    implementation Libs.androidx_navigation_fragment
    implementation Libs.androidx_navigation_ui
    implementation Libs.androidx_preference
    implementation Libs.androidx_recyclerview
    implementation Libs.androidx_recyclerview_selection
    implementation Libs.androidx_room_runtime
    implementation Libs.androidx_room_ktx
    implementation Libs.androidx_work_runtime
    implementation Libs.androidx_work_gcm
    kapt Libs.androidx_room_compiler
    kapt Libs.androidx_hilt_compiler

    // Android Material
    implementation Libs.material_components

    //  Dagger
    implementation Libs.daggerHiltAndroid
    kapt Libs.daggerHiltAndroidCompiler

    // Firebase
    implementation "com.google.firebase:firebase-analytics-ktx"
    implementation "com.google.firebase:firebase-config-ktx"
    implementation "com.google.firebase:firebase-crashlytics-ktx"
    implementation "com.google.firebase:firebase-perf-ktx"

    // FlowBinding
    implementation Libs.flowBindingAndroid
    implementation Libs.flowBindingCommon
    implementation Libs.flowBindingMaterial

    // Google Play
    implementation Libs.googlePlayCore
    implementation Libs.googlePlayCoreKtx

    // Kotlin
    implementation Libs.kotlinStdlib

    // Kotlin Coroutines
    implementation Libs.kotlinCoroutinesAndroid

    // LeakCanary
    debugImplementation Libs.leakCanary
    implementation Libs.leakCanaryPlumberAndroid

    // Logging
    implementation Libs.slf4jAndroidLogger
    implementation Libs.kotlinLogging

    // OkHttp
    implementation Libs.okhttp

    // Okio
    implementation Libs.okio
}

kapt {
    correctErrorTypes true
}

import com.github.triplet.gradle.androidpublisher.ResolutionStrategy
play {
    def serviceAccountFileName = "google-play-api.json"
    if (rootProject.file(serviceAccountFileName).exists()) {
        serviceAccountCredentials.set(rootProject.file(serviceAccountFileName))
    } else if (System.getenv("ANDROID_PUBLISHER_CREDENTIALS") == null) {
        enabled.set(false)
    }
    resolutionStrategy.set(ResolutionStrategy.IGNORE)
    releaseName.set(project.version)
}