import java.text.SimpleDateFormat

ext {
    buildVersionCode = {
        final def (String major, String minor, String patch) = project.version.toString().toLowerCase().tokenize('.')
        final def (String patchVersion, String commitCount) = patch.toLowerCase().tokenize('-')

        final def (Integer majorInt, Integer minorInt, Integer patchInt, Integer commitInt) = [major, minor, patchVersion, commitCount].collect { it.toInteger() }

        final def majorPart = (majorInt * 100000000) // Range 00 - 99
        final def minorPart = (minorInt * 1000000) // Range 00 - 99
        final def patchPart = (patchInt * 10000) // Range 00 - 99
        final def commitPart = commitInt // Range 0000 - 9999
        majorPart + minorPart + patchPart + commitPart
    }
    enhancedVersion = { final int versionMajor, final int versionMinor, final int versionPatch ->
        // Git commit count
        final gitHash = gitScmVersion()
        Integer gitVersion
        try {
            gitVersion = "git rev-list HEAD --count".execute([], project.rootDir).text.trim().toInteger()
        } catch (final e) {
            logger.warn("Error getting git commit count since last tag: $e")
            gitVersion = 999
        }
        final boolean hasModifiedDeletedOrOtherFiles = !"git ls-files -mdo --exclude-standard".execute([], project.rootDir).text.trim().empty
        final boolean hasStagedFiles = !"git diff-index --no-ext-diff --name-only --cached HEAD".execute([], project.rootDir).text.trim().empty
        final boolean dirtyWorkingCopy = hasModifiedDeletedOrOtherFiles || hasStagedFiles
        final gitDescription = dirtyWorkingCopy ? "${gitHash}-dirty" : gitHash
        "${versionMajor}.${versionMinor}.${versionPatch}-${gitVersion}-${gitDescription}"
    }
    gitScmVersion = {
        final def command = "git rev-parse --verify --short=7 HEAD"
        final def process = command.execute([], project.projectDir)
        process.text.trim()
    }
    getBuildTime = {
        final dateFormat = new SimpleDateFormat("yyyy-MM-dd'T'HH:mm'Z'")
        dateFormat.timeZone = TimeZone.getTimeZone("UTC")
        dateFormat.format(new Date())
    }
}